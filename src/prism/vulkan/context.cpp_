#include "prism/vulkan/context.h"

#include "prism/vulkan/error.h"

using namespace prism;

VKAPI_ATTR VkBool32 VKAPI_CALL debug_utils_messenger_callback(VkDebugUtilsMessageSeverityFlagBitsEXT message_severity, VkDebugUtilsMessageTypeFlagsEXT message_type,
                                                              const VkDebugUtilsMessengerCallbackDataEXT *callback_data,
                                                              void *user_data)
{
  if (message_severity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT)
  {
    LOG_WARN("{} - {}: {}", callback_data->messageIdNumber, callback_data->pMessageIdName, callback_data->pMessage);
  }
  else if (message_severity & VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT)
  {
    LOG_ERROR("{} - {}: {}", callback_data->messageIdNumber, callback_data->pMessageIdName, callback_data->pMessage);
  }
  return VK_FALSE;
}

void ContextCreateInfo::add_instance_layer(const std::string &layer)
{
  instance_layers.push_back(layer);
}

void ContextCreateInfo::add_instance_extension(const std::string &extension)
{
  instance_extensions.push_back(extension);
}

void ContextCreateInfo::add_device_extension(const std::string &extension)
{
  device_extensions.push_back(extension);
}

VkResult Queue::submit(const std::vector<VkSubmitInfo> &infos, VkFence fence) const
{
  return vkQueueSubmit(handle, static_cast<uint32_t>(infos.size()), infos.data(), fence);
}

VkResult Queue::present(const VkPresentInfoKHR &info) const
{
  return vkQueuePresentKHR(handle, &info);
}

VkResult Queue::waitIdle() const
{
  return vkQueueWaitIdle(handle);
}

void Context::create(const ContextCreateInfo &info)
{
  create_instance(info);
  create_debug_messenger();
  pick_physical_device(info);
  create_logical_device(info);
}

void Context::destroy()
{
  if (m_device)
    vkDestroyDevice(m_device, nullptr);

  if (m_dbg_messenger)
    m_destroy_dbg_messenger(m_instance, m_dbg_messenger, nullptr);

  if (m_instance)
    vkDestroyInstance(m_instance, nullptr);
}

const Queue &Context::get_queue_by_flags(VkQueueFlags required_queue_flags, uint32_t queue_index) const
{
  for (uint32_t queue_family_index = 0; queue_family_index < m_physical_device_info.queue_family_properties.size(); ++queue_family_index)
  {
    const auto &first_queue = m_queues[queue_family_index][0];

    auto queue_flags = m_physical_device_info.queue_family_properties[queue_family_index].queueFlags;
    auto queue_count = m_physical_device_info.queue_family_properties[queue_family_index].queueCount;

    if ((queue_flags & required_queue_flags) == required_queue_flags && queue_index < queue_count)
    {
      return m_queues[queue_family_index][queue_index];
    }
  }

  LOG_ERROR("Queue not found with required flags: {}", required_queue_flags);
}

void Context::create_instance(const ContextCreateInfo &info)
{
  VkApplicationInfo app_info{};
  app_info.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
  app_info.pApplicationName = info.app_name.c_str();
  app_info.applicationVersion = info.app_version;
  app_info.pEngineName = info.engine_name.c_str();
  app_info.engineVersion = info.engine_version;
  app_info.apiVersion = info.api_version;

  assert(check_instance_layers(info.instance_layers));
  assert(check_instance_extensions(info.instance_extensions));

  VkInstanceCreateInfo instance_info{};
  instance_info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
  instance_info.pApplicationInfo = &app_info;
  instance_info.enabledLayerCount = static_cast<uint32_t>(info.instance_layers.size());
  instance_info.ppEnabledLayerNames = m_instance_layers.data();
  instance_info.enabledExtensionCount = static_cast<uint32_t>(info.instance_extensions.size());
  instance_info.ppEnabledExtensionNames = m_instance_extensions.data();

  VK_CHECK(vkCreateInstance(&instance_info, nullptr, &m_instance));
}

void Context::create_debug_messenger()
{
  m_create_dbg_messenger = reinterpret_cast<PFN_vkCreateDebugUtilsMessengerEXT>(vkGetInstanceProcAddr(m_instance, "vkCreateDebugUtilsMessengerEXT"));
  m_destroy_dbg_messenger = reinterpret_cast<PFN_vkDestroyDebugUtilsMessengerEXT>(vkGetInstanceProcAddr(m_instance, "vkDestroyDebugUtilsMessengerEXT"));

  if (m_create_dbg_messenger)
  {
    VkDebugUtilsMessengerCreateInfoEXT dbg_messenger_info{};
    dbg_messenger_info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    dbg_messenger_info.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
    dbg_messenger_info.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
    dbg_messenger_info.pfnUserCallback = debug_utils_messenger_callback;

    VK_CHECK(m_create_dbg_messenger(m_instance, &dbg_messenger_info, nullptr, &m_dbg_messenger));
  }
}

void Context::pick_physical_device(const ContextCreateInfo &info)
{
  uint32_t count = 0;
  vkEnumeratePhysicalDevices(m_instance, &count, nullptr);
  std::vector<VkPhysicalDevice> physical_devices(count);
  vkEnumeratePhysicalDevices(m_instance, &count, physical_devices.data());

  if (info.select_physical_device_index.has_value())
  {
    if (info.select_physical_device_index.value() >= physical_devices.size())
    {
      LOG_ERROR("Invalid physical device index: {}", info.select_physical_device_index.value());
      return;
    }

    m_physical_device = physical_devices[info.select_physical_device_index.value()];
  }
  else
  {
    m_physical_device = physical_devices[0];
  }

  assert(check_device_extensions(m_physical_device, info.device_extensions));

  vkGetPhysicalDeviceFeatures(m_physical_device, &m_physical_device_info.features);
  vkGetPhysicalDeviceProperties(m_physical_device, &m_physical_device_info.properties);
  vkGetPhysicalDeviceMemoryProperties(m_physical_device, &m_physical_device_info.memory_properties);

  uint32_t queue_family_count = 0;
  vkGetPhysicalDeviceQueueFamilyProperties(m_physical_device, &queue_family_count, nullptr);
  m_physical_device_info.queue_family_properties.resize(queue_family_count);
  vkGetPhysicalDeviceQueueFamilyProperties(m_physical_device, &queue_family_count, m_physical_device_info.queue_family_properties.data());
}

void Context::create_logical_device(const ContextCreateInfo &info)
{
  auto queue_family_count = m_physical_device_info.queue_family_properties.size();
  std::vector<VkDeviceQueueCreateInfo> queue_infos(queue_family_count, {VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO});
  std::vector<std::vector<float>> queue_priorities(queue_family_count);
  for (uint32_t queue_family_index = 0; queue_family_index < queue_family_count; ++queue_family_index)
  {
    queue_priorities[queue_family_index].resize(m_physical_device_info.queue_family_properties[queue_family_index].queueCount, 0.5f);

    auto &queue_info = queue_infos[queue_family_index];
    queue_info.queueFamilyIndex = queue_family_index;
    queue_info.queueCount = queue_priorities[queue_family_index].size();
    queue_info.pQueuePriorities = queue_priorities[queue_family_index].data();
  }

  VkDeviceCreateInfo device_info{};
  device_info.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
  device_info.queueCreateInfoCount = queue_infos.size();
  device_info.pQueueCreateInfos = queue_infos.data();
  device_info.enabledExtensionCount = m_device_extensions.size();
  device_info.ppEnabledExtensionNames = m_device_extensions.data();
  device_info.pQueueCreateInfos = queue_infos.data();
  device_info.queueCreateInfoCount = queue_infos.size();
  device_info.pEnabledFeatures = nullptr;
  device_info.pNext = info.device_features.data();

  VK_CHECK(vkCreateDevice(m_physical_device, &device_info, nullptr, &m_device));

  m_queues.resize(queue_family_count);
  for (uint32_t queue_family_index = 0; queue_family_index < queue_family_count; ++queue_family_index)
  {
    auto queue_count = m_physical_device_info.queue_family_properties[queue_family_index].queueCount;
    m_queues[queue_family_index].resize(queue_count);
    for (uint32_t queue_index = 0; queue_index < queue_count; ++queue_index)
    {
      auto &queue = m_queues[queue_family_index][queue_index];
      vkGetDeviceQueue(m_device, queue_family_index, queue_index, &queue.handle);
    }
  }
}

bool Context::check_instance_layers(const std::vector<std::string> &reqiured_layers)
{
  uint32_t count = 0;
  vkEnumerateInstanceLayerProperties(&count, nullptr);
  std::vector<VkLayerProperties> available_layers(count);
  vkEnumerateInstanceLayerProperties(&count, available_layers.data());

  for (const auto &reqiured_layer : reqiured_layers)
  {
    auto found = std::find_if(available_layers.begin(), available_layers.end(), [&](const VkLayerProperties &layer)
                              { return strcmp(layer.layerName, reqiured_layer.c_str()) == 0; });
    if (found != available_layers.end())
    {
      m_instance_layers.push_back(reqiured_layer.c_str());
    }
    else
    {
      LOG_ERROR("Required instance layer not found: {}", reqiured_layer);
      return false;
    }
  }

  return true;
}

bool Context::check_instance_extensions(const std::vector<std::string> &reqiured_extensions)
{
  uint32_t count = 0;
  vkEnumerateInstanceExtensionProperties(nullptr, &count, nullptr);
  std::vector<VkExtensionProperties> available_extensions(count);
  vkEnumerateInstanceExtensionProperties(nullptr, &count, available_extensions.data());

  for (const auto &reqiured_extension : reqiured_extensions)
  {
    auto found = std::find_if(available_extensions.begin(), available_extensions.end(), [&](const VkExtensionProperties &extension)
                              { return strcmp(extension.extensionName, reqiured_extension.c_str()) == 0; });
    if (found != available_extensions.end())
    {
      m_instance_extensions.push_back(reqiured_extension.c_str());
    }
    else
    {
      LOG_ERROR("Required instance extension not found: {}", reqiured_extension);
      return false;
    }
  }

  return true;
}

bool Context::check_device_extensions(VkPhysicalDevice physical_device, const std::vector<std::string> &reqiured_extensions)
{
  uint32_t count = 0;
  vkEnumerateDeviceExtensionProperties(physical_device, nullptr, &count, nullptr);
  std::vector<VkExtensionProperties> available_extensions(count);
  vkEnumerateDeviceExtensionProperties(physical_device, nullptr, &count, available_extensions.data());

  for (const auto &reqiured_extension : reqiured_extensions)
  {
    auto found = std::find_if(available_extensions.begin(), available_extensions.end(), [&](const VkExtensionProperties &extension)
                              { return strcmp(extension.extensionName, reqiured_extension.c_str()) == 0; });
    if (found != available_extensions.end())
    {
      m_device_extensions.push_back(reqiured_extension.c_str());
    }
    else
    {
      LOG_WARN("Required device extension not found: {}", reqiured_extension);
      return false;
    }
  }

  return true;
}