#include "prism/vulkan/allocation.h"

#include "prism/vulkan/error.h"

using namespace prism;

Allocation::Allocation(const Allocator &allocator)
: m_allocator(allocator.get_handle())
{
}

Allocation::~Allocation()
{
  vmaFreeMemory(m_allocator, m_handle);
}

VmaAllocation Allocation::get_handle() const
{
  return m_handle;
}

VmaAllocator Allocation::get_allocator() const
{
  return m_allocator;
}

VmaAllocationInfo Allocation::get_info() const
{
  VmaAllocationInfo info;
  vmaGetAllocationInfo(m_allocator, m_handle, &info);
  return info;
}

void Allocation::map(VkMemoryMapFlags flags, void **pp_data)
{
  VK_CHECK(vmaMapMemory(m_allocator, m_handle, pp_data));
}

void Allocation::unmap()
{
  vmaUnmapMemory(m_allocator, m_handle);
}

void Allocation::copy(VkDeviceSize offset, VkDeviceSize size, const void *src_data)
{
  void *dst_data;
  map(0, &dst_data);
  memcpy(dst_data, src_data, size);
  unmap();
}
