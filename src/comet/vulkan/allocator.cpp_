#include "comet/vulkan/allocator.h"

#include "comet/vulkan/error.h"

using namespace comet;

Allocator::Allocator(const Instance &instance, const Device &device)
{
  VmaVulkanFunctions vma_vulkan_func{};
  vma_vulkan_func.vkGetInstanceProcAddr = vkGetInstanceProcAddr;
  vma_vulkan_func.vkGetDeviceProcAddr = vkGetDeviceProcAddr;

  VmaAllocatorCreateInfo allocator_info{};
  allocator_info.pVulkanFunctions = &vma_vulkan_func;
  allocator_info.physicalDevice = device.get_physical_device().get_handle();
  allocator_info.device = device.get_handle();
  allocator_info.instance = instance.get_handle();

  bool can_get_memory_requirements = device.check_extension_enable(VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME);
  bool has_dedicated_allocation = device.check_extension_enable(VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME);
  if (can_get_memory_requirements && has_dedicated_allocation && device.check_extension_enable(VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME))
  {
    allocator_info.flags |= VMA_ALLOCATOR_CREATE_KHR_DEDICATED_ALLOCATION_BIT;
  }

  if (device.check_extension_enable(VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME))
  {
    allocator_info.flags |= VMA_ALLOCATOR_CREATE_BUFFER_DEVICE_ADDRESS_BIT;
  }

  if (device.check_extension_enable(VK_EXT_MEMORY_BUDGET_EXTENSION_NAME))
  {
    allocator_info.flags |= VMA_ALLOCATOR_CREATE_EXT_MEMORY_BUDGET_BIT;
  }

  if (device.check_extension_enable(VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME))
  {
    allocator_info.flags |= VMA_ALLOCATOR_CREATE_EXT_MEMORY_PRIORITY_BIT;
  }

  if (device.check_extension_enable(VK_KHR_BIND_MEMORY_2_EXTENSION_NAME))
  {
    allocator_info.flags |= VMA_ALLOCATOR_CREATE_KHR_BIND_MEMORY2_BIT;
  }

  if (device.check_extension_enable(VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME))
  {
    allocator_info.flags |= VMA_ALLOCATOR_CREATE_AMD_DEVICE_COHERENT_MEMORY_BIT;
  }

  VK_CHECK(vmaCreateAllocator(&allocator_info, &m_handle));
}

Allocator::~Allocator()
{
  if (m_handle != VK_NULL_HANDLE)
  {
    vmaDestroyAllocator(m_handle);
  }
}

VmaAllocator Allocator::get_handle() const
{
  return m_handle;
}

