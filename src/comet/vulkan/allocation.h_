#pragma once


#include "vk_mem_alloc.h"

#include "comet/vulkan/allocator.h"

namespace comet
{
  struct AllocationCreateInfo
  {
    VmaAllocationCreateInfo allocation;

    AllocationCreateInfo& with_usage(VmaMemoryUsage usage)
    {
      allocation.usage = usage;
      return *this;
    }

    AllocationCreateInfo& with_flags(VkMemoryPropertyFlags flags)
    {
      allocation.flags = flags;
      return *this;
    }

    AllocationCreateInfo& with_required_flags(VkMemoryPropertyFlags flags)
    {
      allocation.requiredFlags = flags;
      return *this;
    }

    AllocationCreateInfo& with_preferred_flags(VkMemoryPropertyFlags flags)
    {
      allocation.preferredFlags = flags;
      return *this;
    }

    AllocationCreateInfo& with_memory_type_bits(uint32_t bits)
    {
      allocation.memoryTypeBits = bits;
      return *this;
    }

    AllocationCreateInfo& with_pool(VmaPool pool)
    {
      allocation.pool = pool;
      return *this;
    }
  };

  class Allocation
  {
  public:
    Allocation(const Allocator& allocator);

    ~Allocation();

    VmaAllocation get_handle() const;
    VmaAllocator get_allocator() const;
    VmaAllocationInfo get_info() const;

    void map(VkMemoryMapFlags flags, void **pp_data);

    void unmap();

    void copy(VkDeviceSize offset, VkDeviceSize size, const void *src_data);

  protected:
    VmaAllocation m_handle;

    VmaAllocationCreateInfo m_create_info;

    VmaAllocator m_allocator;

    VmaAllocationInfo m_info;

  }; // class Allocation

} // namespace comet